.Missing Web Content
[http_espn_fail.pcapng]

Scenario:
A user is visiting espn.com to check the final score of lastnights basketball game however the webpage is taking longer than usual
to load and is missing content when it finally does finish loading. The problem is isolated to the user's computer only and not 
affecting any other device on the network. We install Wireshark on users computer and begin to capture packets while browsing the
problematic website.

Analysis:
First we check the GET requests and see this capture is limited to 7 different HTTP requests with all but 1 associated with espn's
website the last being a outside cdn most likely used for hosting advertisements/other external content. With nothing standing out
we check the protocol heirarchy and see only two application layer protocols are in use, HTTP and DNS. The 14 DNS packets are odd
because DNS is usually a 2 packet procedure, a request and a response. However there were 7 different HTTP requests to 7 different
domains even though the user only visited one website so if their were 7 different DNS looksup one for each domain that could
be the 14 we are seeing. Next we check the conversations to examine each request more in depth. We notice there were 7 DNS
request and would assume there would be 7 matching IP conversations however there are 8. A potential reason could be contamination
however this extra conversation is between the users stations and IP 203.0.113.94. 6k bytes were sent to this IP yet none back.
Filtering this conversation we notice the TCP handshake is failing because the IP is not sending back a SYN/ACK response eventually
leading users client to send TCP retransmission packets for over 95 seconds. To try to understand why lets put the capture file
aside and consider what isn't there. The user request espn.com and 7 DNS queries happened yet we have this 8th. How did the users
device know about this 8th one? Possible old DNS cache. The users device most likely has a DNS:IP mapping cache that expired that
hosted content for ESPN and used it instead of doing a DNS query. Clearing a DNS cache manually via CLI or terminal should fix the
issue or wait until the DNS cache entry will expire and a new request will be generated.

Conclusion:
By checking datat points generated by HTTP requests, looking at conversations between IP addresses and spotting a few inconsistencies
we came to a reasonable conclusion as to why the users device was not generating the expected content. "In the real world, diagnosing
problems is rarely as simple as scrolling through a list of packets and looking for the ones that look funny. Troubleshooting even
the simplest problems can result in very large captures that rely on Wiresharks analysis and statistics features to spot anomalies"

.Unresponsive Weather Service
[weather_broken.pcapng weather_working.pcapng]

Scenario:
A user notices his device hasn't uploaded data to a server in over nine hours since after midnight. The device provides no errors
other than a cryptic message about the last synchornization time. Since the device is a local one on his home network our best bet is 
to use a cheap TAP or perform ARP cache poisoning to intercept traffic going to and from device to try and diagnose the issue.

Anaylsis:
