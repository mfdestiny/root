.Missing Web Content
[http_espn_fail.pcapng]

Scenario:
A user is visiting espn.com to check the final score of lastnights basketball game however the webpage is taking longer than usual
to load and is missing content when it finally does finish loading. The problem is isolated to the user's computer only and not 
affecting any other device on the network. We install Wireshark on users computer and begin to capture packets while browsing the
problematic website.

Analysis:
First we check the GET requests and see this capture is limited to 7 different HTTP requests with all but 1 associated with espn's
website the last being a outside cdn most likely used for hosting advertisements/other external content. With nothing standing out
we check the protocol heirarchy and see only two application layer protocols are in use, HTTP and DNS. The 14 DNS packets are odd
because DNS is usually a 2 packet procedure, a request and a response. However there were 7 different HTTP requests to 7 different
domains even though the user only visited one website so if their were 7 different DNS looksup one for each domain that could
be the 14 we are seeing. Next we check the conversations to examine each request more in depth. We notice there were 7 DNS
request and would assume there would be 7 matching IP conversations however there are 8. A potential reason could be contamination
however this extra conversation is between the users stations and IP 203.0.113.94. 6k bytes were sent to this IP yet none back.
Filtering this conversation we notice the TCP handshake is failing because the IP is not sending back a SYN/ACK response eventually
leading users client to send TCP retransmission packets for over 95 seconds. To try to understand why lets put the capture file
aside and consider what isn't there. The user request espn.com and 7 DNS queries happened yet we have this 8th. How did the users
device know about this 8th one? Possible old DNS cache. The users device most likely has a DNS:IP mapping cache that expired that
hosted content for ESPN and used it instead of doing a DNS query. Clearing a DNS cache manually via CLI or terminal should fix the
issue or wait until the DNS cache entry will expire and a new request will be generated.

Conclusion:
By checking datat points generated by HTTP requests, looking at conversations between IP addresses and spotting a few inconsistencies
we came to a reasonable conclusion as to why the users device was not generating the expected content. "In the real world,   diagnosing
problems is rarely as simple as scrolling through a list of packets and looking for the ones that look funny. Troubleshooting even
the simplest problems can result in very large captures that rely on Wiresharks analysis and statistics features to spot anomalies"

.Unresponsive Weather Service
[weather_broken.pcapng weather_working.pcapng]

Scenario:
A user notices his device hasn't uploaded data to a server in over nine hours since after midnight. The device provides no errors
other than a cryptic message about the last synchornization time. Since the device is a local one on his home network our best bet is 
to use a cheap TAP or perform ARP cache poisoning to intercept traffic going to and from device to try and diagnose the issue.

Anaylsis:
First lets make sure the device is suppose to be communicating with the DEST device. a WHOIS query doesn't match the DEST we are suppose to talk to however many times a compny will simply utilize IP address space from an ISP without registering it directly
to itself. Another way is to search for the autonmous system number (ASN) associated with the IP address. Using Team Cymru's automated lookup tool it confirms the DEST device is owned by the company we are trying to communicate with. Following the TCP stream we notice the GET request was successful and the response says INVALIDPASSWORD. It seems somehow the device's saved
user credentials were updated and altered.

Conclusion:
3rd party services faciliate networking communication through application protocols like HTTP. Diagnosing and fixing such issues
will be commonplace and packet analysis can be helpful in troubleshooting even more commonplace with IoT.

.No Internet Access
[nowebaccess1.pcapng]

Scenario:
User cannot access the internet. User can acess all internal resources of the network and the architecture is straightforward
with a sginal router server as the default gateway and IP-addressing provided by DHCP.

Analysis:
The packet capture shows an initial ARP request for the device asking for the address of its default gateway and recieves a response. A DNS query is not receiving a response. Is this the correct DNS IP address? No response from the secondary DNS 
server either. Since the DNS server is an external device the router could possibly not being forwarding packets correctly however
no other user on the network has internet connectivity issues so the rules out the router and DNS issues. Instead of a DHCP assigned-address the computer has manually assigned its information and default gateway address is set incorrectly. The ARP request
worked but requested the wrong information due to this.

Conclusion:
Misconfigured clients occur and troubleshooting these type of issues can help with packet analysis. It didn't identify the problem
yet helped tell us where to look, saving time.

.Unwanted Redirection
[nowebaccess2.pcapng]

Scenario:
User can access internet yet cannot access google.com or any of its related domains. This issue is only affecting this user.
This is a simple network.

Analysis:
An ARP request is responded with what is assumed to be google's IP address. A TCP handshake is initiated with a SYN packet but
no SYN ACK is sent back. First thought, Is this the correct IP address for google? Is the lookup table in the responding ARP
stale and incorrect? The response back instead of being SYN ACK is RST ACK. Following the ARP request we would expect to see a
DNS query for google. There are two conditions that could prevent a DNS query: 1. the MAC:IP mapping already exists in ccache 
and 2. the mapping exists in the hosts file. Upon examining the hosts file the problem is found to be an incorrect mapping. A
computer will check its hosts first before checking outside with DNS.

Conclusion:
Again, packet analysis didn't immediately solve the problem but helped point to where we should look and quickly identify the problem.

.Upstream Problems
[nowebaccess3.pcapng]

Scenario:
All users on the network cannot access google.com. This is a simple network.

Analysis:
Since the capture begins with a DNS query we assumed the ARP process has already occured. We get a DNS response and begin the TCP
handshake with the supplied address. A SYN packet is sent yet no SYN ACK is responded. First thought a misconfigured DNS server. We
can access all other parts of the internet and at this point there are no solutions on our end.

Conclusion:
The issue wasn't with any devices on the local network it was outside the controllable network infrastructure.

.Inconsistent Printer
[inconsistent_printer.pcapng]

Scenario:
Users reporting a high volume printer is malfunctioning. The printer will stop half way, help desk would like you to ensure that
it isn't a network probelm.

Analysis:
The communcation between printer and computer seem to go well until a TCP retransmission packet occurs somewhere in the middle 
of the data communication. The device is the sender and it seems no matter the device the printer stops responding. It seems to be
a printer problem and not a network problem.

Conclusion:
Althought this wasn't a network problem analyzing the flow did help pinpoint the issue.

.No Branch Office Connectivity
[standed_clientside.pcapng standed_brandns.pcapng]

Scenario:
Company is expanding and creating a remote branch with a slave DNS server suppose to get all data from master DNS server. The remote branch cannot access the app server on the HQ side of the network. This is a two network system connected by WAN.

Analysis:
